-- =====================================================
-- Supabase Schema for Books Management System
-- Roles: Super Admin, College Admin, Students
-- =====================================================

-- Enable RLS (Row Level Security)

-- =====================================================
-- 1. COLLEGES TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS colleges (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    code VARCHAR(20) NOT NULL UNIQUE,
    address TEXT,
    phone VARCHAR(20),
    email VARCHAR(255) UNIQUE,
    website VARCHAR(255),
    logo_url TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 2. USERS TABLE (Enhanced with roles and college association)
-- =====================================================
CREATE TABLE IF NOT EXISTS users (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    mobile VARCHAR(20),
    role VARCHAR(50) NOT NULL DEFAULT 'student' CHECK (role IN ('super_admin', 'college_admin', 'student')),
    college_id UUID REFERENCES colleges(id) ON DELETE CASCADE,
    student_id VARCHAR(50), -- For students: enrollment number
    profile_image_url TEXT,
    is_active BOOLEAN DEFAULT true,
    is_verified BOOLEAN DEFAULT false,
    last_login TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Constraints
    CONSTRAINT check_college_admin_has_college CHECK (
        (role = 'college_admin' AND college_id IS NOT NULL) OR 
        (role = 'student' AND college_id IS NOT NULL) OR 
        (role = 'super_admin' AND college_id IS NULL)
    ),
    CONSTRAINT check_student_has_student_id CHECK (
        (role = 'student' AND student_id IS NOT NULL) OR 
        (role != 'student')
    )
);

-- =====================================================
-- 3. BOOKS TABLE (Enhanced with college association)
-- =====================================================
CREATE TABLE IF NOT EXISTS books (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    authorname VARCHAR(255) NOT NULL,
    description TEXT,
    pdf_url TEXT NOT NULL,
    cover_image_url TEXT,
    isbn VARCHAR(20),
    publisher VARCHAR(255),
    publication_year INTEGER,
    pages INTEGER,
    language VARCHAR(50) DEFAULT 'English',
    category VARCHAR(100),
    subject VARCHAR(100),
    rate DECIMAL(2,1) DEFAULT 0.0 CHECK (rate >= 0 AND rate <= 5),
    year INTEGER NOT NULL CHECK (year >= 2020 AND year <= 2030),
    semester INTEGER NOT NULL CHECK (semester >= 1 AND semester <= 8),
    college_id UUID NOT NULL REFERENCES colleges(id) ON DELETE CASCADE,
    created_by UUID REFERENCES users(id) ON DELETE SET NULL,
    is_active BOOLEAN DEFAULT true,
    download_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 4. BOOK ACCESS LOGS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS book_access_logs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    book_id UUID NOT NULL REFERENCES books(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    access_type VARCHAR(20) NOT NULL CHECK (access_type IN ('view', 'download')),
    ip_address INET,
    user_agent TEXT,
    accessed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 5. USER SESSIONS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS user_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token_hash VARCHAR(255) NOT NULL,
    device_info TEXT,
    ip_address INET,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 6. SYSTEM SETTINGS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS system_settings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    key VARCHAR(100) UNIQUE NOT NULL,
    value TEXT,
    description TEXT,
    is_public BOOLEAN DEFAULT false,
    updated_by UUID REFERENCES users(id),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Users indexes
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_users_college_id ON users(college_id);
CREATE INDEX IF NOT EXISTS idx_users_student_id ON users(student_id);
CREATE INDEX IF NOT EXISTS idx_users_is_active ON users(is_active);

-- Books indexes
CREATE INDEX IF NOT EXISTS idx_books_college_id ON books(college_id);
CREATE INDEX IF NOT EXISTS idx_books_year ON books(year);
CREATE INDEX IF NOT EXISTS idx_books_semester ON books(semester);
CREATE INDEX IF NOT EXISTS idx_books_year_semester ON books(year, semester);
CREATE INDEX IF NOT EXISTS idx_books_authorname ON books(authorname);
CREATE INDEX IF NOT EXISTS idx_books_category ON books(category);
CREATE INDEX IF NOT EXISTS idx_books_subject ON books(subject);
CREATE INDEX IF NOT EXISTS idx_books_is_active ON books(is_active);
CREATE INDEX IF NOT EXISTS idx_books_created_by ON books(created_by);

-- Colleges indexes
CREATE INDEX IF NOT EXISTS idx_colleges_code ON colleges(code);
CREATE INDEX IF NOT EXISTS idx_colleges_is_active ON colleges(is_active);

-- Book access logs indexes
CREATE INDEX IF NOT EXISTS idx_book_access_logs_book_id ON book_access_logs(book_id);
CREATE INDEX IF NOT EXISTS idx_book_access_logs_user_id ON book_access_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_book_access_logs_accessed_at ON book_access_logs(accessed_at);

-- User sessions indexes
CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON user_sessions(expires_at);
CREATE INDEX IF NOT EXISTS idx_user_sessions_is_active ON user_sessions(is_active);

-- =====================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- =====================================================

-- Enable RLS on all tables
ALTER TABLE colleges ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE books ENABLE ROW LEVEL SECURITY;
ALTER TABLE book_access_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_settings ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- COLLEGES RLS POLICIES
-- =====================================================

-- Super admins can do everything with colleges
CREATE POLICY "Super admins can manage all colleges" ON colleges
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'super_admin'
            AND users.is_active = true
        )
    );

-- College admins can only view their own college
CREATE POLICY "College admins can view their college" ON colleges
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'college_admin'
            AND users.college_id = colleges.id
            AND users.is_active = true
        )
    );

-- Students can view their college info
CREATE POLICY "Students can view their college" ON colleges
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'student'
            AND users.college_id = colleges.id
            AND users.is_active = true
        )
    );

-- =====================================================
-- USERS RLS POLICIES
-- =====================================================

-- Super admins can manage all users
CREATE POLICY "Super admins can manage all users" ON users
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users u 
            WHERE u.id = auth.uid() 
            AND u.role = 'super_admin'
            AND u.is_active = true
        )
    );

-- College admins can manage users in their college
CREATE POLICY "College admins can manage their college users" ON users
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users u 
            WHERE u.id = auth.uid() 
            AND u.role = 'college_admin'
            AND u.college_id = users.college_id
            AND u.is_active = true
        )
    );

-- Users can view and update their own profile
CREATE POLICY "Users can manage their own profile" ON users
    FOR ALL USING (users.id = auth.uid());

-- =====================================================
-- BOOKS RLS POLICIES
-- =====================================================

-- Super admins can manage all books
CREATE POLICY "Super admins can manage all books" ON books
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'super_admin'
            AND users.is_active = true
        )
    );

-- College admins can manage books in their college
CREATE POLICY "College admins can manage their college books" ON books
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'college_admin'
            AND users.college_id = books.college_id
            AND users.is_active = true
        )
    );

-- Students can only view books in their college
CREATE POLICY "Students can view their college books" ON books
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'student'
            AND users.college_id = books.college_id
            AND users.is_active = true
        )
        AND books.is_active = true
    );

-- =====================================================
-- BOOK ACCESS LOGS RLS POLICIES
-- =====================================================

-- Super admins can view all access logs
CREATE POLICY "Super admins can view all access logs" ON book_access_logs
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'super_admin'
            AND users.is_active = true
        )
    );

-- College admins can view access logs for their college books
CREATE POLICY "College admins can view their college access logs" ON book_access_logs
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM users u
            JOIN books b ON b.id = book_access_logs.book_id
            WHERE u.id = auth.uid() 
            AND u.role = 'college_admin'
            AND u.college_id = b.college_id
            AND u.is_active = true
        )
    );

-- Users can insert their own access logs
CREATE POLICY "Users can create their own access logs" ON book_access_logs
    FOR INSERT WITH CHECK (user_id = auth.uid());

-- =====================================================
-- SYSTEM SETTINGS RLS POLICIES
-- =====================================================

-- Super admins can manage all settings
CREATE POLICY "Super admins can manage system settings" ON system_settings
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'super_admin'
            AND users.is_active = true
        )
    );

-- Others can only view public settings
CREATE POLICY "Public can view public settings" ON system_settings
    FOR SELECT USING (is_public = true);

-- =====================================================
-- FUNCTIONS AND TRIGGERS
-- =====================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply triggers to all relevant tables
CREATE TRIGGER update_colleges_updated_at 
    BEFORE UPDATE ON colleges 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_books_updated_at 
    BEFORE UPDATE ON books 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Function to increment book download count
CREATE OR REPLACE FUNCTION increment_book_download_count()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.access_type = 'download' THEN
        UPDATE books 
        SET download_count = download_count + 1 
        WHERE id = NEW.book_id;
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to increment download count when access log is inserted
CREATE TRIGGER increment_book_download_count_trigger
    AFTER INSERT ON book_access_logs
    FOR EACH ROW
    EXECUTE FUNCTION increment_book_download_count();

-- =====================================================
-- SAMPLE DATA
-- =====================================================

-- Insert sample colleges
INSERT INTO colleges (name, code, email, phone, address) VALUES 
('Delhi Technical University', 'DTU001', 'admin@dtu.ac.in', '+91-11-27871023', 'Bawana Road, Delhi-110042'),
('Jawaharlal Nehru University', 'JNU002', 'admin@jnu.ac.in', '+91-11-26704000', 'New Mehrauli Road, New Delhi-110067'),
('Indian Institute of Technology Delhi', 'IITD003', 'admin@iitd.ac.in', '+91-11-26591785', 'Hauz Khas, New Delhi-110016')
ON CONFLICT (code) DO NOTHING;

-- Get college IDs for sample data
-- Insert sample super admin (no college association)
INSERT INTO users (email, password_hash, full_name, role, mobile, is_verified) VALUES 
('superadmin@system.com', '$2b$10$example.hashed.password', 'System Super Admin', 'super_admin', '+91-9999999999', true)
ON CONFLICT (email) DO NOTHING;

-- Insert sample college admins
INSERT INTO users (email, password_hash, full_name, role, college_id, mobile, is_verified) VALUES 
('admin@dtu.ac.in', '$2b$10$example.hashed.password', 'DTU Administrator', 'college_admin', 
    (SELECT id FROM colleges WHERE code = 'DTU001'), '+91-9999999998', true),
('admin@jnu.ac.in', '$2b$10$example.hashed.password', 'JNU Administrator', 'college_admin', 
    (SELECT id FROM colleges WHERE code = 'JNU002'), '+91-9999999997', true)
ON CONFLICT (email) DO NOTHING;

-- Insert sample students
INSERT INTO users (email, password_hash, full_name, role, college_id, student_id, mobile, is_verified) VALUES 
('student1@dtu.ac.in', '$2b$10$example.hashed.password', 'John Doe', 'student', 
    (SELECT id FROM colleges WHERE code = 'DTU001'), 'DTU2024001', '+91-9999999996', true),
('student2@dtu.ac.in', '$2b$10$example.hashed.password', 'Jane Smith', 'student', 
    (SELECT id FROM colleges WHERE code = 'DTU001'), 'DTU2024002', '+91-9999999995', true),
('student3@jnu.ac.in', '$2b$10$example.hashed.password', 'Bob Johnson', 'student', 
    (SELECT id FROM colleges WHERE code = 'JNU002'), 'JNU2024001', '+91-9999999994', true)
ON CONFLICT (email) DO NOTHING;

-- Insert sample books for DTU
INSERT INTO books (name, authorname, description, pdf_url, year, semester, college_id, category, subject, created_by) VALUES 
('Data Structures and Algorithms', 'Thomas H. Cormen', 'Comprehensive guide to DSA', 'https://example.com/dsa.pdf', 2024, 3, 
    (SELECT id FROM colleges WHERE code = 'DTU001'), 'Computer Science', 'Programming',
    (SELECT id FROM users WHERE email = 'admin@dtu.ac.in')),
('Database Management Systems', 'Raghu Ramakrishnan', 'Complete DBMS guide', 'https://example.com/dbms.pdf', 2024, 4, 
    (SELECT id FROM colleges WHERE code = 'DTU001'), 'Computer Science', 'Database',
    (SELECT id FROM users WHERE email = 'admin@dtu.ac.in')),
('Computer Networks', 'Andrew S. Tanenbaum', 'Networking fundamentals', 'https://example.com/networks.pdf', 2024, 5, 
    (SELECT id FROM colleges WHERE code = 'DTU001'), 'Computer Science', 'Networking',
    (SELECT id FROM users WHERE email = 'admin@dtu.ac.in'))
ON CONFLICT DO NOTHING;

-- Insert sample books for JNU
INSERT INTO books (name, authorname, description, pdf_url, year, semester, college_id, category, subject, created_by) VALUES 
('Political Science Theory', 'Robert Dahl', 'Political theory fundamentals', 'https://example.com/polsci.pdf', 2024, 1, 
    (SELECT id FROM colleges WHERE code = 'JNU002'), 'Political Science', 'Theory',
    (SELECT id FROM users WHERE email = 'admin@jnu.ac.in')),
('International Relations', 'Hans Morgenthau', 'IR concepts and practice', 'https://example.com/ir.pdf', 2024, 2, 
    (SELECT id FROM colleges WHERE code = 'JNU002'), 'Political Science', 'International Relations',
    (SELECT id FROM users WHERE email = 'admin@jnu.ac.in'))
ON CONFLICT DO NOTHING;

-- Insert sample system settings
INSERT INTO system_settings (key, value, description, is_public) VALUES 
('app_name', 'Books Management System', 'Application name', true),
('app_version', '1.0.0', 'Current application version', true),
('max_upload_size', '50', 'Maximum file upload size in MB', false),
('allowed_file_types', 'pdf,doc,docx', 'Allowed file types for upload', false),
('maintenance_mode', 'false', 'Enable maintenance mode', false)
ON CONFLICT (key) DO NOTHING;

-- =====================================================
-- HELPFUL VIEWS
-- =====================================================

-- View for college statistics
CREATE OR REPLACE VIEW college_stats AS
SELECT 
    c.id,
    c.name,
    c.code,
    COUNT(DISTINCT u.id) FILTER (WHERE u.role = 'student') as total_students,
    COUNT(DISTINCT u.id) FILTER (WHERE u.role = 'college_admin') as total_admins,
    COUNT(DISTINCT b.id) as total_books,
    COUNT(DISTINCT bal.id) as total_book_accesses
FROM colleges c
LEFT JOIN users u ON u.college_id = c.id AND u.is_active = true
LEFT JOIN books b ON b.college_id = c.id AND b.is_active = true
LEFT JOIN book_access_logs bal ON bal.book_id = b.id
WHERE c.is_active = true
GROUP BY c.id, c.name, c.code;

-- View for popular books
CREATE OR REPLACE VIEW popular_books AS
SELECT 
    b.id,
    b.name,
    b.authorname,
    b.year,
    b.semester,
    c.name as college_name,
    b.download_count,
    COUNT(bal.id) as total_accesses,
    AVG(b.rate) as average_rating
FROM books b
JOIN colleges c ON c.id = b.college_id
LEFT JOIN book_access_logs bal ON bal.book_id = b.id
WHERE b.is_active = true AND c.is_active = true
GROUP BY b.id, b.name, b.authorname, b.year, b.semester, c.name, b.download_count
ORDER BY b.download_count DESC, total_accesses DESC;

-- =====================================================
-- SECURITY FUNCTIONS
-- =====================================================

-- Function to check if user has permission
CREATE OR REPLACE FUNCTION has_permission(user_role TEXT, required_role TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    CASE required_role
        WHEN 'super_admin' THEN
            RETURN user_role = 'super_admin';
        WHEN 'college_admin' THEN
            RETURN user_role IN ('super_admin', 'college_admin');
        WHEN 'student' THEN
            RETURN user_role IN ('super_admin', 'college_admin', 'student');
        ELSE
            RETURN FALSE;
    END CASE;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- COMMENTS FOR DOCUMENTATION
-- =====================================================

COMMENT ON TABLE colleges IS 'Stores college/institution information';
COMMENT ON TABLE users IS 'Stores user information with role-based access';
COMMENT ON TABLE books IS 'Stores book information associated with colleges';
COMMENT ON TABLE book_access_logs IS 'Tracks book access and download history';
COMMENT ON TABLE user_sessions IS 'Manages user authentication sessions';
COMMENT ON TABLE system_settings IS 'Stores application configuration settings';

COMMENT ON COLUMN users.role IS 'User role: super_admin, college_admin, or student';
COMMENT ON COLUMN books.year IS 'Academic year for the book';
COMMENT ON COLUMN books.semester IS 'Semester number (1-8)';
COMMENT ON COLUMN book_access_logs.access_type IS 'Type of access: view or download';